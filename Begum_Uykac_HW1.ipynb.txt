{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**This notebook is designed to be used on the biology-specific version of Berkeley’s datahub that has bioinformatics tools already installed. Go to https://biology.datahub.berkeley.edu/user/[your-calnet-username]/lab and log in. This is not the same as the regular datahub! While these tasks are possible on your own computer or Google Colab, you would need to install a lot more software and we do not recommend it. Note that some of these commands will take up to 45 minutes to run on the datahub. If you don’t see any output, that doesn’t mean it’s not working!**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "fJjItPgd33cm"
   },
   "source": [
    "# Hands-on exercise #1: RNA-seq alignment\n",
    "The goal of these practice problems is to align RNA-seq data against the human\n",
    "transcriptome and compare the resulting abundance estimates. You’ll:\n",
    "1. Use the bowtie2 aligner on an RNA-seq sample from SARS-CoV-2 infected cells.\n",
    "2. Use the kallisto aligner on the same data.\n",
    "3. Compare the abundance estimates for kallisto and bowtie2 in python."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "id": "6beLeYfR4rXb"
   },
   "outputs": [],
   "source": [
    "## The questions you’ll answer for the assignment are in the TODO blocks.\n",
    "## Submit this jupyter notebook as an .ipynb for credit.\n",
    "## No need to write long answers - if I ask for a number,\n",
    "## you can just tell me the number.\n",
    "\n",
    "## replace the example answer below with your answer\n",
    "\n",
    "## TO DO: What is an example answer?\n",
    "## <replace with your answer>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "tVRfDfcG6dw3"
   },
   "source": [
    "## 1. Terminal / Intro ##\n",
    "\n",
    "To access terminal commands in Jupyter notebooks, use ```!<your command>```, e.g. ```!ls``` in a code cell.\n",
    "Let’s play around with linux for a few minutes.\n",
    "\n",
    "1. Can you access terminal commands directly from the jupyter notebook?\n",
    "2. Where are you? (What directory are you in?) (hint: the first initial, p, of the 3-letter command stands for \"present\")\n",
    "3. Who are you? (What is your username?) The command is ```whoami```\n",
    "4. Do we have bowtie2? Type ```which bowtie2```\n",
    "5. Do we have kallisto? (see below if not)\n",
    "6. What is a path? Type ```echo $PATH```\n",
    "7. Instead of ```!<your command>```, try ```%%bash``` followed by lines of bash commands.\n",
    "\n",
    "### COMMAND LINE SECTION ###"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "_onwexpwE9ha",
    "outputId": "4f9394c4-faa1-4609-a8c5-fd89e56a9514"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Alignments  data.tar.gz  index.tar.gz\t\t\tshared\n",
      "berkeley    HW1.ipynb\t kallisto\t\t\tUntitled1.ipynb\n",
      "Data\t    Index\t kallisto_linux-v0.46.1.tar.gz\n"
     ]
    }
   ],
   "source": [
    "# practice some bash commands below\n",
    "\n",
    "# example\n",
    "!ls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "ZThA_I_1whJk",
    "outputId": "6f11f41d-0a9f-412d-bbe7-210a08fde040"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/home/jovyan\n"
     ]
    }
   ],
   "source": [
    "# 2.\n",
    "!pwd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "oF_fO2i6w8NT",
    "outputId": "e5111755-bf5b-4215-a22d-ec6d2770b284"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "jovyan\n"
     ]
    }
   ],
   "source": [
    "# 3.\n",
    "!whoami"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "id": "k6QlwguOxB1P"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/opt/conda/bin/bowtie2\n"
     ]
    }
   ],
   "source": [
    "# 4. \n",
    "!which bowtie2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "id": "k6QlwguOxB1P"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/opt/conda/bin/bowtie2-align-s version 2.4.2\n",
      "64-bit\n",
      "Built on fv-az219-114\n",
      "Tue Mar 23 22:17:38 UTC 2021\n",
      "Compiler: gcc version 9.3.0 (crosstool-NG 1.24.0.133_b0863d8_dirty) \n",
      "Options: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /opt/conda/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1616536948337/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/opt/conda=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\n",
      "Sizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}\n"
     ]
    }
   ],
   "source": [
    "# Bonus: check which bowtie2 version do we have\n",
    "!bowtie2 --version"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "id": "k6QlwguOxB1P"
   },
   "outputs": [],
   "source": [
    "# 5. \n",
    "!which kallisto"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "be25RKNFx3IC",
    "outputId": "6e1996d5-062c-48fc-b8a0-7fc62011f0cb"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/R/library/littler/bin:/opt/conda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n"
     ]
    }
   ],
   "source": [
    "# 6. \n",
    "!echo $PATH"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "CA24s2XyzQ7M",
    "outputId": "02955cd2-80f6-4c83-8fb1-537524aa0ecf"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/home/jovyan\n",
      "Alignments\n",
      "berkeley\n",
      "Data\n",
      "data.tar.gz\n",
      "HW1.ipynb\n",
      "Index\n",
      "index.tar.gz\n",
      "kallisto\n",
      "kallisto_linux-v0.46.1.tar.gz\n",
      "shared\n",
      "Untitled1.ipynb\n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "# 7. \n",
    "pwd\n",
    "ls"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "eu_9eJRVDcsr"
   },
   "source": [
    "## Installations\n",
    "To complete this assignment we need to use the following tools: bowtie2, samtools and kallisto. Above, we've already checked if we have bowtie2 and kallisto installed. We have bowtie2 and we'll deal with installing kallisto in just a second.\n",
    "\n",
    "For now, let's check if we have samtools"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/opt/conda/bin/samtools\n",
      "samtools 1.3.1\n",
      "Using htslib 1.3.1\n",
      "Copyright (C) 2016 Genome Research Ltd.\n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "#How do we check if we have samtools?\n",
    "which samtools\n",
    "\n",
    "#What version of samtools do we have?\n",
    "samtools --version"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Tip: Most Linux tools have a ```--help``` (or ```-h```) flag that prints out how to use a tool!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Program: samtools (Tools for alignments in the SAM format)\n",
      "Version: 1.3.1 (using htslib 1.3.1)\n",
      "\n",
      "Usage:   samtools <command> [options]\n",
      "\n",
      "Commands:\n",
      "  -- Indexing\n",
      "     dict           create a sequence dictionary file\n",
      "     faidx          index/extract FASTA\n",
      "     index          index alignment\n",
      "\n",
      "  -- Editing\n",
      "     calmd          recalculate MD/NM tags and '=' bases\n",
      "     fixmate        fix mate information\n",
      "     reheader       replace BAM header\n",
      "     rmdup          remove PCR duplicates\n",
      "     targetcut      cut fosmid regions (for fosmid pool only)\n",
      "     addreplacerg   adds or replaces RG tags\n",
      "\n",
      "  -- File operations\n",
      "     collate        shuffle and group alignments by name\n",
      "     cat            concatenate BAMs\n",
      "     merge          merge sorted alignments\n",
      "     mpileup        multi-way pileup\n",
      "     sort           sort alignment file\n",
      "     split          splits a file by read group\n",
      "     quickcheck     quickly check if SAM/BAM/CRAM file appears intact\n",
      "     fastq          converts a BAM to a FASTQ\n",
      "     fasta          converts a BAM to a FASTA\n",
      "\n",
      "  -- Statistics\n",
      "     bedcov         read depth per BED region\n",
      "     depth          compute the depth\n",
      "     flagstat       simple stats\n",
      "     idxstats       BAM index stats\n",
      "     phase          phase heterozygotes\n",
      "     stats          generate stats (former bamcheck)\n",
      "\n",
      "  -- Viewing\n",
      "     flags          explain BAM flags\n",
      "     tview          text alignment viewer\n",
      "     view           SAM<->BAM<->CRAM conversion\n",
      "     depad          convert padded BAM to unpadded BAM\n",
      "\n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "#For example, try to use the --help flag with samtools\n",
    "\n",
    "samtools --help"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "eu_9eJRVDcsr"
   },
   "source": [
    "Now we'll install kallisto by downloading a file from a link using the command ```wget```\n",
    "\n",
    "Note: using %%bash in a juypter notebook will make the \\*entire\\* cell a self-contained bash script. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "bx6YQzDT7Jf7",
    "outputId": "fb0d868b-ee1e-4eb2-8931-8bb977f900f0"
   },
   "outputs": [],
   "source": [
    "%%bash\n",
    "wget --quiet https://github.com/pachterlab/kallisto/releases/download/v0.46.1/kallisto_linux-v0.46.1.tar.gz"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    ".gz means it is compressed with “gzip” and .tar means a whole directory structure has been\n",
    "saved as a single file. To extract it: use the command ```tar -xvzf target_dir.tar.gz```\n",
    "\n",
    "If you wanna know what the ```-xvzf``` flags stand for, try ```tar --help```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "kallisto/\n",
      "kallisto/test/\n",
      "kallisto/README.md\n",
      "kallisto/kallisto\n",
      "kallisto/license.txt\n",
      "kallisto/test/reads_1.fastq.gz\n",
      "kallisto/test/transcripts.fasta.gz\n",
      "kallisto/test/README.md\n",
      "kallisto/test/chrom.txt\n",
      "kallisto/test/Snakefile\n",
      "kallisto/test/reads_2.fastq.gz\n",
      "kallisto/test/transcripts.gtf.gz\n"
     ]
    }
   ],
   "source": [
    "#Extract the tar file below\n",
    "!tar -xvzf kallisto_linux-v0.46.1.tar.gz"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the kallisto folder we just downloaded and extraced, there is a ready-to-use kallisto _executable_. An _executable_ means that the file already contains encoded instructions that can be executed by the operating system. The executable basically works like any bash command.\n",
    "\n",
    "However, the kallisto folder is not in our $PATH (Do you remember what a PATH is from above?), so the shell will not understand the command ```kallisto```. To do that, we must first add the directory containing the executable to file path. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/home/jovyan/kallisto:/opt/conda/lib/R/library/littler/bin:/opt/conda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n",
      "kallisto, version 0.46.1\n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "export PATH=/home/jovyan/kallisto:$PATH\n",
    "echo $PATH\n",
    "kallisto version"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Q_9gUYgZDO5g"
   },
   "source": [
    "## 2. Download the data and set up your directories\n",
    "Download the sequencing data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "ZKipand9DQRJ",
    "outputId": "66a2815e-f3df-47dc-9783-ba8efd7d8e86"
   },
   "outputs": [],
   "source": [
    "%%bash\n",
    "wget --quiet http://storage.ingolia-lab.org/lareaulab/BioE290/data.tar.gz"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "id": "YUCeRMFGCnXA"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data/\n",
      "Data/Series1_NHBE_SARS-CoV-2_1/\n",
      "Data/Series1_NHBE_SARS-CoV-2_1/SRR11412228.fastq\n",
      "Data/Series1_NHBE_SARS-CoV-2_1/SRR11412229.fastq\n",
      "Data/Series1_NHBE_SARS-CoV-2_1/SRR11412230.fastq\n",
      "Data/Series1_NHBE_SARS-CoV-2_1/SRR11412227.fastq\n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "#Extract the sequencing data like we did above\n",
    "\n",
    "tar -xvzf data.tar.gz"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "erTvuL-HDFJK"
   },
   "source": [
    "Usually the first step of the analysis is to create an index for the transcriptome. This is slow so I\n",
    "already did it for you. Download and extract the bowtie 2 index that I already built:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "## What is an index and why do you think it's helpful for sequence alignments?\n",
    "\n",
    "## Index is a data structure that can locate sequences and regions within the reference genomes or sequences.\n",
    "## It helps us retrieve the specific sequences in large genomes quickly, which makes the sequence alignment faster and easier."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "l12LhTqLCvqN",
    "outputId": "c534afca-402d-4a3b-d122-6430447e18a9"
   },
   "outputs": [],
   "source": [
    "%%bash\n",
    "wget --quiet http://storage.ingolia-lab.org/lareaulab/BioE290/index.tar.gz\n",
    "tar -xzf index.tar.gz"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "lrXQTBQtC3GR"
   },
   "source": [
    "Then download the kallisto index:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "HRTdmIskCxw5",
    "outputId": "a5910b88-b670-4d54-b126-557846dec51b"
   },
   "outputs": [],
   "source": [
    "%%bash\n",
    "cd Index\n",
    "wget --quiet https://github.com/pachterlab/kallisto-transcriptome-indices/releases/download/ensembl-96/homo_sapiens.tar.gz\n",
    "tar -xzf homo_sapiens.tar.gz"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "id": "Qfry11GqFgqs"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "bowtie2  kallisto\n"
     ]
    }
   ],
   "source": [
    "## Make a directory called Alignments\n",
    "## with subdirectories bowtie2 and kallisto.\n",
    "\n",
    "!mkdir -p Alignments/bowtie2\n",
    "!mkdir -p Alignments/kallisto\n",
    "!ls Alignments"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "qW1DROnwFwD8"
   },
   "source": [
    "List (```ls```) your directories and see where everything is. Note how extracting a .tar.gz file creates a\n",
    "directory (because it matches the original structure that I packaged up).\n",
    "\n",
    "The actual indexes are these:\n",
    "\n",
    "bowtie:\n",
    "\n",
    "```Index/bowtie2/grch38_transcriptome```\n",
    "\n",
    "kallisto:\n",
    "\n",
    "```Index/homo_sapiens/transcriptome.idx```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "bbcZqIlJIS3W"
   },
   "source": [
    "## 3. Aligning data to the transcriptome\n",
    "\n",
    "The reads to align are in your Data directory.\n",
    "\n",
    "```Data/Series1_NHBE_SARS-CoV-2_1/*```\n",
    "\n",
    "We’re going to use two methods to align them. I want to emphasize that the bowtie2 +\n",
    "samtools workflow here is **not** a standard approach.\n",
    "\n",
    "We’re doing it because it shows a very\n",
    "naive way to count things. The kallisto approach is what I would recommend for real use.\n",
    "\n",
    "If you used bowtie2 in real life, you would combine it with other programs to do the analysis.\n",
    "\n",
    "a. bowtie2 alignment:\n",
    "\n",
    "```bowtie2 -x [index] \\ ``` \\\n",
    "&emsp;```-U [reads, comma separated if multiple files] \\```\\\n",
    "&emsp;```-S [output]```\n",
    "\n",
    "You can paste long, multi-line commands directly onto the server, because the backslashes at\n",
    "the end of each line indicate that the command will continue onto the next line.\n",
    "\n",
    "There are three different arguments given to the bowtie2 aligner here:\\\n",
    "• -x path/to/genome-index specifies the filename of the genome index\n",
    "Page 2 of 5\n",
    "September 16, 2021 BioE 190/290\\\n",
    "• -U path/to/reads.fastq specifies the filename of the sequencing reads to be aligned, which\n",
    "can be gzip-compressed. They are separated by commas, with no spaces, if there’s more\n",
    "than one.\\\n",
    "• -S path/to/output.sam specifies the filename of the SAM-format output file. I suggest using: ```Alignments/bowtie2/sc2_1.transcriptome.sam```\n",
    "\n",
    "\n",
    "\n",
    "Fill in the appropriate commands to align the four fastq files from the \\*data\\* directory downloaded **earlier**:\n",
    "Align them all in one bowtie2 command. At the end, it will spit out some statistics about the\n",
    "alignments, which you should copy and paste somewhere so you can use them to answer\n",
    "these questions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "id": "vs7j0nkuH0Yg"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "15032096 reads; of these:\n",
      "  15032096 (100.00%) were unpaired; of these:\n",
      "    1187574 (7.90%) aligned 0 times\n",
      "    1840075 (12.24%) aligned exactly 1 time\n",
      "    12004447 (79.86%) aligned >1 times\n",
      "92.10% overall alignment rate\n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "## What is your bowtie2 commandline for files in the data dir?\n",
    "# your code below\n",
    "\n",
    "bowtie2 -x Index/bowtie2/grch38_transcriptome -U Data/Series1_NHBE_SARS-CoV-2_1/* -S Alignments/bowtie2/sc2_1.transcriptome.sam\n",
    "\n",
    "## How many reads aligned uniquely?\n",
    "# 1840075\n",
    "\n",
    "## How many reads aligned at all?\n",
    "# 13844522"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "qW1DROnwFwD8"
   },
   "source": [
    "List (```ls```) your directories and see where everything is. Note how extracting a .tar.gz file creates a\n",
    "directory (because it matches the original structure that I packaged up).\n",
    "\n",
    "The actual indexes are these:\n",
    "\n",
    "bowtie:\n",
    "\n",
    "```Index/bowtie2/grch38_transcriptome```\n",
    "\n",
    "kallisto:\n",
    "\n",
    "```Index/homo_sapiens/transcriptome.idx```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "GxgrdYSPN3hJ"
   },
   "source": [
    "b. Sorting, indexing, and counting the bowtie2 alignments\n",
    "\n",
    "Now we’re going to count up how many reads hit each transcript. Please note that the\n",
    "bowtie2 approach we’re using is not what you would do in a real analysis — I’m setting it up\n",
    "this way to contrast it with the kallisto results.\n",
    "\n",
    "First, you need to sort your SAM alignments into a consistent order along the transcripts, and\n",
    "you’ll save that as a compressed BAM file to take up less space."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "id": "yS1YFqFNOEJ2"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[bam_sort_core] merging from 11 files...\n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "samtools sort -o Alignments/bowtie2/sc2_1.sorted.bam \\\n",
    "Alignments/bowtie2/sc2_1.transcriptome.sam"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "W5JRKxCsOIu9"
   },
   "source": [
    "Then you use sam tools index to let it count them faster."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "id": "df7Ta1sWOK9P"
   },
   "outputs": [],
   "source": [
    "%%bash\n",
    "samtools index Alignments/bowtie2/sc2_1.sorted.bam"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "q-MoZQXrOOVC"
   },
   "source": [
    "\n",
    "Finally, count up how many reads there are per transcript!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "id": "zuGvkmknOH4u"
   },
   "outputs": [],
   "source": [
    "%%bash\n",
    "samtools idxstats Alignments/bowtie2/sc2_1.sorted.bam > \\\n",
    " Alignments/bowtie2/sc2_1.idxstats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "id": "vgfG-M3wOT9D"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "188754 Alignments/bowtie2/sc2_1.idxstats\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Error in atexit._run_exitfuncs:\n",
      "Traceback (most recent call last):\n",
      "  File \"/opt/conda/lib/python3.9/site-packages/popularity_contest/reporter.py\", line 105, in report_popularity\n",
      "    libraries = get_used_libraries(initial_modules, current_modules)\n",
      "  File \"/opt/conda/lib/python3.9/site-packages/popularity_contest/reporter.py\", line 74, in get_used_libraries\n",
      "    all_packages = get_all_packages()\n",
      "  File \"/opt/conda/lib/python3.9/site-packages/popularity_contest/reporter.py\", line 51, in get_all_packages\n",
      "    for f in dist.files:\n",
      "  File \"/opt/conda/lib/python3.9/site-packages/importlib_metadata/__init__.py\", line 511, in files\n",
      "    return skip_missing_files(\n",
      "  File \"/opt/conda/lib/python3.9/site-packages/importlib_metadata/_functools.py\", line 102, in wrapper\n",
      "    return func(param, *args, **kwargs)\n",
      "  File \"/opt/conda/lib/python3.9/site-packages/importlib_metadata/__init__.py\", line 509, in skip_missing_files\n",
      "    return list(filter(lambda path: path.locate().exists(), package_paths))\n",
      "  File \"/opt/conda/lib/python3.9/site-packages/importlib_metadata/__init__.py\", line 546, in <genexpr>\n",
      "    (subdir / name)\n",
      "  File \"/opt/conda/lib/python3.9/pathlib.py\", line 939, in relative_to\n",
      "    raise ValueError(\"{!r} is not in the subpath of {!r}\"\n",
      "ValueError: '/pandas/_libs/algos.cpython-39-x86_64-linux-gnu.so' is not in the subpath of '/opt/conda/lib/python3.9/site-packages' OR one path is relative and the other is absolute.\n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "## How many lines are in the sc2_1.idxstats file?\n",
    "## Use the wc -l command.\n",
    "\n",
    "wc -l Alignments/bowtie2/sc2_1.idxstats\n",
    "\n",
    "# 188,754\n",
    "\n",
    "## Respond to the following prompts:\n",
    "## \n",
    "## What does each line in teh sc2_1.idxstats file represent?\n",
    "## Each line in the sch2_1.idxstats file represents the number of reads of the RNA-seq sample \n",
    "## from SARS-CoV-2 infected cells that align (and do not align) to each reference human genome\n",
    "##\n",
    "## How many genes are in the human genome, approximately?\n",
    "## There are approximately 120,000 genes in the human genome.\n",
    "##\n",
    "## What does the difference between those two numbers tell us,\n",
    "## and how is that relevant to the various alignment and quantification\n",
    "## tools we discussed?\n",
    "## The difference between those two numbers tell us that bowtie2 overcounts which could be due to\n",
    "## multiple alignments (12004447 times in this case), overlapping genes, isotopes, errors in \n",
    "## sequencing, etc. It is important to know when to use which tool to get the most accurate results.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "f8fsVGfIO7GY"
   },
   "source": [
    "Tip for future use: BAM files are compressed, but you can view them with samtools:\n",
    "\n",
    "```samtools view yourfile.bam | less -S```\n",
    "\n",
    "This uses the view subcommand in samtools to read in BAM-format alignments (the\n",
    "default) and display the text, SAM-format alignments (also the default), and then\n",
    "“pipes” this output to less rather than printing millions of alignments to your terminal.\n",
    "As always, you can quit less with q."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "iipr95hyPAw1"
   },
   "source": [
    "c. kallisto alignment:\n",
    "Now on to kallisto - you’ll see how much faster it is! Easy to use, too!\n",
    "Set up a command using the kallisto quant (quantify) program. This will put the\n",
    "alignments into the kallisto subdirectory you already created in your Alignments directory.\n",
    "\n",
    "```kallisto quant -i [index] -o Alignments/kallisto \\```\\\n",
    "&emsp;```—single -l 200 -s 20 \\```\\\n",
    "&emsp;```[fastq filenames, separated by spaces]```\n",
    "\n",
    "Include the four fastq files from the Series1_NHBE_SARS-CoV-2_1 data directory.\n",
    "\n",
    "\n",
    "Linux tip: you can specify all the files in a directory with \\*, all the fastq files with\n",
    "\\*.fastq, etc. The \\* is a wildcard that can match any string. The command line can\n",
    "interpret that output as a list separated by spaces.\n",
    "\n",
    "So, what would happen if you put Data/Series1_NHBE_SARS-CoV-2_1/* in\n",
    "the kallisto command?\n",
    "\n",
    "Why do you think this won't work for bowtie2?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "id": "sStFTDp2Y1hg"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "[quant] fragment length distribution is truncated gaussian with mean = 200, sd = 20\n",
      "[~warn] you specified using a gaussian but have paired end data\n",
      "[~warn] we suggest omitting these parameters and let us estimate the distribution from data\n",
      "[index] k-mer length: 31\n",
      "[index] number of targets: 188,753\n",
      "[index] number of k-mers: 109,544,288\n",
      "[index] number of equivalence classes: 760,757\n",
      "[quant] running in paired-end mode\n",
      "[quant] will process pair 1: Data/Series1_NHBE_SARS-CoV-2_1/SRR11412227.fastq\n",
      "                             Data/Series1_NHBE_SARS-CoV-2_1/SRR11412228.fastq\n",
      "[quant] will process pair 2: Data/Series1_NHBE_SARS-CoV-2_1/SRR11412229.fastq\n",
      "                             Data/Series1_NHBE_SARS-CoV-2_1/SRR11412230.fastq\n",
      "[quant] finding pseudoalignments for the reads ... done\n",
      "[quant] processed 7,454,422 reads, 743,988 reads pseudoaligned\n",
      "[   em] quantifying the abundances ... done\n",
      "[   em] the Expectation-Maximization algorithm ran for 1,117 rounds\n",
      "\n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "## What is you kallisto command for the files in the Data directory?\n",
    "## Remember to add kallisto to your $PATH!!!\n",
    "\n",
    "export PATH=/home/jovyan/kallisto:$PATH\n",
    "kallisto quant -i Index/homo_sapiens/transcriptome.idx -o Alignments/kallisto -single -l 200 -s 20 Data/Series1_NHBE_SARS-CoV-2_1/*.fastq\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "HwqR0RU3P1w4"
   },
   "source": [
    "## 4. How similar are bowtie2 and kallisto?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "id": "bKHmxoZDO_67"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "188754 Alignments/kallisto/abundance.tsv\n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "## How many lines are in the kallisto output file, abundance.tsv?\n",
    "wc -l Alignments/kallisto/abundance.tsv\n",
    "# 188754\n",
    "\n",
    "## What do the -l 200 and -s 20 indicate?\n",
    "## -l 200 indicates that mean fragment length is 200 base pairs and -s 20 indicates that the standard deviation of the fragment length is 20\n",
    "\n",
    "## I guessed 200 as the number, but what if I was wrong and it\n",
    "## should be more like 400? You can find a description in the\n",
    "## kallisto manual https://pachterlab.github.io/kallisto/manual\n",
    "\n",
    "# If we used 400 as average fragment length, we could get an inaccurate result. It would be\n",
    "# harder to align and read a longer transcript and it increases the possibility of errors."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "dfr8r1BTQV7o"
   },
   "source": [
    "Next, we’re going to compare the count per transcript between the bowtie2 alignment and\n",
    "the kallisto quantification.\n",
    "This portion of the assignment uses a jupyter notebook.\n",
    "\n",
    "For this first assignment, I’ve written\n",
    "out most of what to do, with blanks to fill in. This will let you get up to speed on python if\n",
    "you’re new to it. Coding is not the main goal of this class, but it’s essential for looking at your\n",
    "data.\n",
    "\n",
    "### PYTHON STARTS HERE ###\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "NNKaHfdwQvF3"
   },
   "source": [
    "TODO Assignment:\n",
    "\n",
    "• The goal is a scatterplot of the count per transcript in the bowtie2 analysis (third column\n",
    "of the idxstats output) vs kallisto (est_counts column), plotted on a log scale and with\n",
    "labeled axes. Ideally, your plot will show density, such as hexbin, so you can see how\n",
    "many points are plotted over each other.\n",
    "\n",
    "• The jupyter notebook will show you how to do this if you’re not familiar."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "id": "mCR_AEoH33cn"
   },
   "outputs": [],
   "source": [
    "import pandas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "id": "j9c3X6Ag33co"
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "8sYOr3-p33co"
   },
   "source": [
    "We'll read in the data with pandas, creating two dataframes. The bowtie2 output file doesn't have column labels, so you'll have to add them. I looked at the samtools idxstats documentation to find what they are: \"transcript\", \"length\", \"count\", and \"unmapped\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 159
    },
    "id": "tC7pEgn933co",
    "outputId": "8fc8f72f-674d-48a3-958b-9d693cc31ae4",
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>transcript</th>\n",
       "      <th>length</th>\n",
       "      <th>count</th>\n",
       "      <th>unmapped</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ENST00000631435.1</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ENST00000434970.2</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ENST00000448914.1</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ENST00000415118.1</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ENST00000632684.1</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>188749</th>\n",
       "      <td>ENST00000639660.1</td>\n",
       "      <td>284</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>188750</th>\n",
       "      <td>ENST00000643577.1</td>\n",
       "      <td>105</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>188751</th>\n",
       "      <td>ENST00000646356.1</td>\n",
       "      <td>900</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>188752</th>\n",
       "      <td>ENST00000645792.1</td>\n",
       "      <td>930</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>188753</th>\n",
       "      <td>*</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1187574</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>188754 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               transcript  length  count  unmapped\n",
       "0       ENST00000631435.1      12      0         0\n",
       "1       ENST00000434970.2       9      0         0\n",
       "2       ENST00000448914.1      13      0         0\n",
       "3       ENST00000415118.1       8      0         0\n",
       "4       ENST00000632684.1      12      0         0\n",
       "...                   ...     ...    ...       ...\n",
       "188749  ENST00000639660.1     284      0         0\n",
       "188750  ENST00000643577.1     105      0         0\n",
       "188751  ENST00000646356.1     900      0         0\n",
       "188752  ENST00000645792.1     930      1         0\n",
       "188753                  *       0      0   1187574\n",
       "\n",
       "[188754 rows x 4 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bowtie = pandas.read_table( \"Alignments/bowtie2/sc2_1.idxstats\" , header=None, names=(\"transcript\",\"length\",\"count\",\"unmapped\"))\n",
    "bowtie"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "EuTqnvMo33cp"
   },
   "source": [
    "That last line is the count of all the reads that don't align to a transcript. We don't want that, so save everything but that line."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "id": "9H4btiLK33cp"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>transcript</th>\n",
       "      <th>length</th>\n",
       "      <th>count</th>\n",
       "      <th>unmapped</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ENST00000631435.1</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ENST00000434970.2</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ENST00000448914.1</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ENST00000415118.1</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ENST00000632684.1</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>188748</th>\n",
       "      <td>ENST00000639790.1</td>\n",
       "      <td>1370</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>188749</th>\n",
       "      <td>ENST00000639660.1</td>\n",
       "      <td>284</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>188750</th>\n",
       "      <td>ENST00000643577.1</td>\n",
       "      <td>105</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>188751</th>\n",
       "      <td>ENST00000646356.1</td>\n",
       "      <td>900</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>188752</th>\n",
       "      <td>ENST00000645792.1</td>\n",
       "      <td>930</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>188753 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               transcript  length  count  unmapped\n",
       "0       ENST00000631435.1      12      0         0\n",
       "1       ENST00000434970.2       9      0         0\n",
       "2       ENST00000448914.1      13      0         0\n",
       "3       ENST00000415118.1       8      0         0\n",
       "4       ENST00000632684.1      12      0         0\n",
       "...                   ...     ...    ...       ...\n",
       "188748  ENST00000639790.1    1370      0         0\n",
       "188749  ENST00000639660.1     284      0         0\n",
       "188750  ENST00000643577.1     105      0         0\n",
       "188751  ENST00000646356.1     900      0         0\n",
       "188752  ENST00000645792.1     930      1         0\n",
       "\n",
       "[188753 rows x 4 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Remove the last line in bowtie\n",
    "bowtie = bowtie.iloc[:-1]\n",
    "bowtie"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Biwhbken33cp"
   },
   "source": [
    "And now, read in the kallisto output. This one does have a line of column headers, hooray."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "id": "am6YyMyX33cp"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>target_id</th>\n",
       "      <th>length</th>\n",
       "      <th>eff_length</th>\n",
       "      <th>est_counts</th>\n",
       "      <th>tpm</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ENST00000631435.1</td>\n",
       "      <td>12</td>\n",
       "      <td>2.60424</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ENST00000434970.2</td>\n",
       "      <td>9</td>\n",
       "      <td>2.52391</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ENST00000448914.1</td>\n",
       "      <td>13</td>\n",
       "      <td>2.62202</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ENST00000415118.1</td>\n",
       "      <td>8</td>\n",
       "      <td>2.48058</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ENST00000632684.1</td>\n",
       "      <td>12</td>\n",
       "      <td>2.60424</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>188748</th>\n",
       "      <td>ENST00000639790.1</td>\n",
       "      <td>1370</td>\n",
       "      <td>1171.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>188749</th>\n",
       "      <td>ENST00000639660.1</td>\n",
       "      <td>284</td>\n",
       "      <td>85.00110</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>188750</th>\n",
       "      <td>ENST00000643577.1</td>\n",
       "      <td>105</td>\n",
       "      <td>4.43819</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>188751</th>\n",
       "      <td>ENST00000646356.1</td>\n",
       "      <td>900</td>\n",
       "      <td>701.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>188752</th>\n",
       "      <td>ENST00000645792.1</td>\n",
       "      <td>930</td>\n",
       "      <td>731.00000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.82463</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>188753 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                target_id  length  eff_length  est_counts      tpm\n",
       "0       ENST00000631435.1      12     2.60424         0.0  0.00000\n",
       "1       ENST00000434970.2       9     2.52391         0.0  0.00000\n",
       "2       ENST00000448914.1      13     2.62202         0.0  0.00000\n",
       "3       ENST00000415118.1       8     2.48058         0.0  0.00000\n",
       "4       ENST00000632684.1      12     2.60424         0.0  0.00000\n",
       "...                   ...     ...         ...         ...      ...\n",
       "188748  ENST00000639790.1    1370  1171.00000         0.0  0.00000\n",
       "188749  ENST00000639660.1     284    85.00110         0.0  0.00000\n",
       "188750  ENST00000643577.1     105     4.43819         0.0  0.00000\n",
       "188751  ENST00000646356.1     900   701.00000         0.0  0.00000\n",
       "188752  ENST00000645792.1     930   731.00000         1.0  1.82463\n",
       "\n",
       "[188753 rows x 5 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "kallisto = pandas.read_table( \"Alignments/kallisto/abundance.tsv\", header=0)\n",
    "kallisto"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Ch1p_UTF33cp"
   },
   "source": [
    "As you can see, the first columns of each file look similar. Maybe they're identical! That would make it really easy to compare the counts from the two files. First, we'll try this with '=='."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "id": "TlE0F7wL33cq"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0         True\n",
       "1         True\n",
       "2         True\n",
       "3         True\n",
       "4         True\n",
       "          ... \n",
       "188748    True\n",
       "188749    True\n",
       "188750    True\n",
       "188751    True\n",
       "188752    True\n",
       "Length: 188753, dtype: bool"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bowtie[\"transcript\"] == kallisto[\"target_id\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "1IoPs2SI33cq"
   },
   "source": [
    "Does that tell you for sure? Now try it with the pandas function equals(), which works on a whole dataframe or a column of a dataframe (called a 'series' in pandas)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "id": "2WivjdiT33cq"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bowtie[\"transcript\"].equals(kallisto[\"target_id\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "w8QFNwwk33cq"
   },
   "source": [
    "Hooray! Now we'll plot them against each other. Plot it in log scale, because that's a more natural scale for count data like this. Remember to label the axes and the plot so I know what I'm looking at!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "id": "O7SwKNsl33cr"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'bowtie2 vs kallisto counts')"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot( bowtie[\"count\"], kallisto[\"est_counts\"], 'o', color='grey')\n",
    "plt.xscale('log')\n",
    "plt.xlim(1,1e6)\n",
    "plt.yscale('log')\n",
    "plt.ylim(1,1e6)\n",
    "plt.xlabel('bowtie2 counts')\n",
    "plt.ylabel('kallisto counts')\n",
    "plt.title('bowtie2 vs kallisto counts')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "pSib4gTx33cr"
   },
   "source": [
    "You can tell a lot of points are plotted over each other. So next, let's try to look at the density of points. Hexbin is a quick way to do this. It calculates the number of points within each little hexagon of a grid. Here I'm using a quick and sloppy trick of adding 1 to all the values so it doesn't complain about taking log(0)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "id": "-SlXiWTr33cr"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'bowtie2 vs kallisto density')"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "bowtie2_counts = bowtie[\"count\"]\n",
    "kallisto_counts = kallisto[\"est_counts\"]\n",
    "plt.hexbin( bowtie2_counts + 1, kallisto_counts + 1, bins='log', xscale='log', yscale='log', cmap='Purples')\n",
    "# and give it x and y labels and a title!\n",
    "plt.xlabel('bowtie2 density')\n",
    "plt.ylabel('kallisto density')\n",
    "plt.title('bowtie2 vs kallisto density')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "9G0EhfoW33cr"
   },
   "source": [
    "There you have it! Save the completed notebook and submit it along with your answers to the assignment. The assignment has a few more questions you should answer based on this graph."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "id": "MLMnvbOP33cr"
   },
   "outputs": [],
   "source": [
    "## Now that you’ve made your plot, what does\n",
    "## this show you about the similarity of estimates?\n",
    "\n",
    "# The density plot shows that bowtie2 overcounts compared to kallisto.\n",
    "# < (this will look a lot better if you insert line breaks (enter)) >\n",
    "#\n",
    "#\n",
    "#\n",
    "\n",
    "## From what we’ve discussed in class, what might contribute to the\n",
    "## differences? The difference is not due to pseudoalignment vs alignment.\n",
    "## Rather, it has to do with what else kallisto does beyond that. What other\n",
    "## tools that we discussed might be a good second step after bowtie alignment,\n",
    "## to get closer to the kallisto output?\n",
    "\n",
    "# The difference can be due to bowtie2 counting overlapping genes multiple times that leads to overcounting.\n",
    "# \n",
    "#\n",
    "#\n",
    "#"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [
    "tVRfDfcG6dw3",
    "eu_9eJRVDcsr"
   ],
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.15"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}

